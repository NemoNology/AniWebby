@using Blazor_pwa.Models.Implementations
@using Blazor_pwa.Models.Interfaces
@using Blazor_pwa.Models.Enums
@namespace Blazor_pwa.Pages.Components
@inherits BaseComponent

<div style="overflow: hidden; @Style" class="flex flex-col gap-3 p-2 w-100 @Class">
    <div class="flex flex-col h-100 w-100 bg-light" style="border: 4px solid var(--color-accent);">
        <div class="w-100 bg-accent p-2" style="text-align: center;">Элементы</div>
        <div class="w-100 flex bg-accent p-2" style="justify-content: space-around;">
            <Button OnClick="() => {
                var el = HtmlElements.Division;
                Project.Elements.Add(el);
                }">+Div</Button>
            <Button OnClick="() => {
                var el = HtmlElements.Image;
                Project.Elements.Add(el);
                }">+Img</Button>
        </div>
        <div id="project_tree" style="display: flex; flex-direction: column;" class="w-100">
            @foreach (var el in Project.Elements)
            {
                <ListViewObject Header="@HtmlElementsInfo.GetHtmlElementNameByType(el.Type)" Element="el" OnDeleteClick="element => {
                    if (element is not null && element is HtmlElement)
                    {
                        Project.Elements.Remove((HtmlElement)element);
                        OnElementDelete((HtmlElement)element);
                        StateHasChanged();
                    }
                    }" OnElementClick="el => OnElementClick.Invoke(el)" Class="w-100" />
            }
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Project Project { get; set; } = null!;
    [Parameter]
    public Action<HtmlElement> OnElementDelete { get; set; } = _ => { };
    [Parameter]
    public Action<HtmlElement> OnElementClick { get; set; } = _ => { };
}